extends ./layout

block content
  .row-fluid
    .span3
      .well
        ul.nav.nav-list
          li.nav-header Introduction to Promises
          li: a(href='#motivation') Motivation
          li: a(href='#done') Basic Usage
          li: a(href='#then') Transformation
          li: a(href='#all') Combination
          li: a(href='#implementations') Implementations / Downloads
    .span9
      h1 Introduction to Promises

      p.
        This guide assumes familiarity with basic JavaScript and should be suitable for people new
        to asynchronous programming and those with some experience in either the browser on node.js

      h2#motivation Motivation

      p.
        We want our code to be asynchronous, because if we write synchronous code then the user interface will lock up (in client side applications) or no requests will get handled (in server applications).  One way to solve this problem is threads, but they create their own problems and are not supported in JavaScript.

      p.
        One of the simplest ways to make functions asynchronous is to accept a callback function.  This is what node.js does (at time of writing).  This works, but has a number of issues.

      ol
        li You lose the separation of inputs and outputs to a function since the callback must be passed as an input
        li It is difficult to compose multiple serial or parallel operations
        li You lose a lot of helpful debugging information and error handling ability relating to stack traces and the bubbling up of exceptions
        li You can no longer use the built in control flow constructs and they must all be re-invented to work asynchronously.

      p.
        Many APIs in the browser use some kind of event based model for control flow, which solves problem 1, but not problems 3 to 4.

      p.
        Promises aim to solve all these issues, although problem number 4 requires new language features, so is not fixed until ES6, which supports generator functions.

      h2#done Basic Usage

      p.
        The core idea behind promises is that a promise represents a value that is the result of an asynchronous operation.  They may instead turn out to be a thrown error.  Asynchronous functions should return promises:

      :js
        var prom = get('http://www.example.com')

      p.
        If we request the content of the web page <code>www.example.com</code> we will be doing it asynchronously so we get a promise back.

      p.
        In order to extract the value from that promise, we use <code>.done</code> which queues a function to be executed when the promise is fulfilled with some result.

      :js
        var prom = get('http://www.example.com')
        prom.done(function (content) {
          console.log(content)
        })

      p.
        Note how we're passing a function that has not been called to <code>.done</code> and it will be called only once, when the promise is fulfilled.  We can call <code>.done</code> as many times as we want and as late or early as we want and we will always get the same result.  For example, it's fine to call it after the promise has already been resolved:

      :js
        var cache = {}
        function getCache(url) {
          if (cache[url]) return cache[url]
          else return cache[url] = get(url)
        }

        var promA = getCache('http://www.example.com')
        promA.done(function (content) {
          console.log(content)
        })
        setTimeout(function () {
          var promB = getCache('http://www.example.com')
          promB.done(function (content) {
            console.log(content)
          })
        }, 10000)

      p.
        Of course, requesting an error page can easilly go wrong, and throw an error.  By default, <code>.done</code> just throws that error so it gets logged appropriately and (in environments other than the browser) crashes the application.  We often want to attach our own handler instead though:

      :js
        var prom = get('http://www.example.com')
        prom.done(function (content) {
          console.log(content)
        }, function (ex) {
          console.error('Requesting www.example.com failed, maybe you should try again?')
          console.error(ex.stack)
        })

      h2#then Transformation

      p.
        Often you have a promise for one thing and you need to do some work on it
        to get a promise for another thing.  Promises have a <code>.then</code> method
        that works a bit like <code>.map</code> on an array.

      :js
        function getJSON(url) {
          return get(url)
            .then(function (res) {
              return JSON.parse(res)
            })
        }

        getJSON('http://www.example.com/foo.json').done(function (res) {
          console.dir(res)
        })

      p.
        Note how <code>.then</code> handles any errors for us so that they bubble up the
        stack just like in synchronous code.  You can also handle them when you call <code>.then</code>

      :js
        function getJSON(url) {
          return get(url)
            .then(function (res) {
              return JSON.parse(res)
            }, function (err) {
              if (canRetry(err)) return getJSON(url)
              else throw err
            })
        }

        getJSON('http://www.example.com/foo.json').done(function (res) {
          console.dir(res)
        })

      p.
        Here, errors thrown by <code>JSON.parse</code> are not handled by the error handler we attached,
        but some errors we received from calling <code>get</code> are handled with a retry.  Note how
        we can return a promise from <code>.then</code> and it is automatically unwrapped:

      :js
        var prom = get('http://example.com/url-to-request')
          .then(function (url) {
            return get(url)
          })
          .then(function (res) {
            return JSON.parse(res)
          })
        prom.done(function (finalResult) {
          console.dir(finalResult)
          //this is actually the very final result
        })

      h2#all Combination

      p.
        One advantage of a promise being a value is that you can perform useful operations to combine promises.  One such operation that most libraries support is all:

      :js
        var a = get('http://www.example.com')
        var b = get('http://www.example.co.uk')
        var both = Promise.all([a, b])
        both.done(function (res) {
          var a = res[0]
          var b = res[1]
          console.dir({
            '.com': a,
            '.co.uk': b
          })
        })

      p.
        This is extremely useful if you need to run lots of operations in parallel.  The idea also extends to large, unbounded arrays of values:

      :js
        function readFiles(files) {
          return Promise.all(files.map(function (name) {
            return readFile(name)
          }))
        }
        readFiles(['fileA.txt', 'fileB.txt', 'fileC.txt']).done(function (filesContents) {
          console.dir(filesContents)
        })

      p.
        Of course, serial operations can be composed just using <code>.then</code>

      :js
        get('http://www.example.com').then(function (res) {
          console.log('.com')
          console.dir(res)
          return get('http://www.example.co.uk')
        }).done(function (res) {
          console.log('.co.uk')
          console.dir(res)
        })

      p.
        And with a little imagination you can use this technique to handle arrays as well:

      :js
        function readFiles(files) {
          var result = []

          // create an initial promise that is already fulfilled with null
          var ready = Promise.from(null)

          files.forEach(function (name) {
            ready = ready.then(function () {
              return readFile(name)
            }).then(function (content) {
              result.push(content)
            })
          })

          return ready.then(function () {
            return result
          })
        }
        readFiles(['fileA.txt', 'fileB.txt', 'fileC.txt']).done(function (filesContents) {
          console.dir(filesContents)
        })

      h2#implementations Implementations / Downloads

      p.
        There are a large number of Promises/A+ compatible implementations out there, not all of which have <code>.done</code> methods or <code>Promise.all</code> methods.  You should feel free to use whichever implementation best fits in with your needs.  Here are the two I would recommend.

      +implementation('promise', 3)

      +implementation('q', 3)

      h3 Other

      p You can find more implementations 
        a(href='/implementations') here
