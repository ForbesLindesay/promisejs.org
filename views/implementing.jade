extends ./layout

block content
  .container
    .title
      h1 Implementing
      small by Forbes Lindesay

    h2#intro Introduction
    p.
      This article was originally written as an answer on
      #[a(href="http://stackoverflow.com/questions/23772801/basic-javascript-promise-implementation-attempt/23785244#23785244") Stack Overflow].
      The hope is that by seeing how you would go about implementing #[code Promise] in JavaScript,
      you may gain a better understanding of how promises behave.

    h2#state State Machine

    p.
      Since a promise is just a state machine, we should start by considering the state information we will need later.

    :js
      var PENDING = 0;
      var FULFILLED = 1;
      var REJECTED = 2;

      function Promise() {
        // store state which can be PENDING, FULFILLED or REJECTED
        var state = PENDING;

        // store value or error once FULFILLED or REJECTED
        var value = null;

        // store sucess & failure handlers attached by calling .then or .done
        var handlers = [];
      }

    h2#transitions Transitions

    p.
      Next, lets consider the two key transitions that can occur, fulfilling and rejecting:

    :js
      var PENDING = 0;
      var FULFILLED = 1;
      var REJECTED = 2;

      function Promise() {
        // store state which can be PENDING, FULFILLED or REJECTED
        var state = PENDING;

        // store value once FULFILLED or REJECTED
        var value = null;

        // store sucess & failure handlers
        var handlers = [];

        function fulfill(result) {
          state = FULFILLED;
          value = result;
        }

        function reject(error) {
          state = REJECTED;
          value = error;
        }
      }

    p.
      That gives us the basic low level transitions, but lets consider an extra, higher-level
      transition called #[code resolve]

    :js
      var PENDING = 0;
      var FULFILLED = 1;
      var REJECTED = 2;

      function Promise() {
        // store state which can be PENDING, FULFILLED or REJECTED
        var state = PENDING;

        // store value once FULFILLED or REJECTED
        var value = null;

        // store sucess & failure handlers
        var handlers = [];

        function fulfill(result) {
          state = FULFILLED;
          value = result;
        }

        function reject(error) {
          state = REJECTED;
          value = error;
        }

        function resolve(result) {
          try {
            var then = getThen(result);
            if (then) {
              doResolve(then.bind(result), resolve, reject)
              return
            }
            fulfill(result);
          } catch (e) {
            reject(e);
          }
        }
      }

    p.
      Note how #[code resolve] accepts either a promise or a plain value and if it's a promise, waits for it to complete.
      A promise must never be fulfilled with another promise, so it is this #[code resolve] function that we will expose, rather
      than the internal #[code fulfill]. We've used a couple of helper methods, so lets define those:

    :js
      /**
       * Check if a value is a Promise and, if it is,
       * return the `then` method of that promise.
       *
       * @param {Promise|Any} value
       * @return {Function|Null}
       */
      function getThen(value) {
        var t = typeof value;
        if (value && (t === 'object' || t === 'function')) {
          var then = value.then;
          if (typeof then === 'function') {
            return then;
          }
        }
        return null;
      }

      /**
       * Take a potentially misbehaving resolver function and make sure
       * onFulfilled and onRejected are only called once.
       *
       * Makes no guarantees about asynchrony.
       *
       * @param {Function} fn A resolver function that may not be trusted
       * @param {Function} onFulfilled
       * @param {Function} onRejected
       */
      function doResolve(fn, onFulfilled, onRejected) {
        var done = false;
        try {
          fn(function (value) {
            if (done) return
            done = true
            onFulfilled(value)
          }, function (reason) {
            if (done) return
            done = true
            onRejected(reason)
          })
        } catch (e) {
          if (done) return
          done = true
          onRejected(e)
        }
      }

    h2#constructing Constructing

    p.
      We now have the completed internal state machine, but we have yet to expose either
      a method of resolving the promise or of observing it. Lets start by adding a way
      of resolving the promise.

    :js
      var PENDING = 0;
      var FULFILLED = 1;
      var REJECTED = 2;

      function Promise(fn) {
        // store state which can be PENDING, FULFILLED or REJECTED
        var state = PENDING;

        // store value once FULFILLED or REJECTED
        var value = null;

        // store sucess & failure handlers
        var handlers = [];

        function fulfill(result) {
          state = FULFILLED;
          value = result;
        }

        function reject(error) {
          state = REJECTED;
          value = error;
        }

        function resolve(result) {
          try {
            var then = getThen(result);
            if (then) {
              doResolve(then.bind(result), resolve, reject)
              return
            }
            fulfill(result);
          } catch (e) {
            reject(e);
          }
        }

        doResolve(fn, resolve, reject);
      }

    p.
      As you can see, we re-use #[code doResolve] because we have another untrusted resolver.
      The #[code fn] is allowed to call both #[code resolve] and #[code reject] multiple times,
      and even throw exceptions.  It is up to us to ensure that the promise is only resolved
      or rejected once, and then never transitions into a different state ever again.

    h2#done Observing (via .done)

    p.
      We now have a completed state machine, but we still have no way to observe any changes to it.
      Our ultimate goal is to implement #[code .then], but the semantics of #[code .done] are much
      simpler so lets implement that first.

    p.
      Our goal here is to implement #[code promise.done(onFulfilled, onRejected)] such that:

    ul
      li only one of #[code onFulfilled] or #[code onRejected] is called
      li it is only called once
      li it is never called until the next tick (i.e. after the #[code .done] method has returned)
      li it is called regardless of whether the promise is resolved before or after we call #[code .done]

    :js
      // manages handlers according to Promise state
      function handle(handler) {
        if (state === PENDING) {
          handlers.push(handler);
        } else {
          if (state === FULFILLED &&
            typeof handler.onFulfilled === 'function') {
            handler.onFulfilled(value);
          }
          if (state === REJECTED &&
            typeof handler.onRejected === 'function') {
            handler.onRejected(value);
          }
        }
      }

      // set fulfill/reject callbacks
      this.done = function (onFulfilled, onRejected) {
        // ensure we are always asynchronous
        setTimeout(function () {
          handle({
            onFulfilled: onFulfilled,
            onRejected: onRejected
          });
        }, 0);
      }

    p.
      We make sure to notify the handlers when the Promise is resolved or rejected.
      We only ever do this in the next tick by removes them from the queue.

    :js
      function fulfill(result) {
        state = FULFILLED;
        value = result;

        // runs handlers and resets queue
        handlers.forEach(handle);
        handlers = [];
      }

      function reject(error) {
        state = REJECTED;
        value = error;

        // runs handlers and resets queue
        handlers.forEach(handle);
        handlers = [];
      }

    h2#then Observing (via .then)

    p.
      Now that we have #[code .done] implemented, we can easily implement #[code .then] to
      just do the same thing, but construct a new Promise in the process.

    :js
      this.then = function (onFulfilled, onRejected) {
        var self = this;
        return new Promise(function (resolve, reject) {
          return self.done(function (result) {
            if (typeof onFulfilled === 'function') {
              try {
                return resolve(onFulfilled(result));
              } catch (e) {
                return reject(e);
              }
            } else {
              return resolve(result);
            }
          }, function (error) {
            if (typeof onRejected === 'function') {
              try {
                return resolve(onRejected(error));
              } catch (e) {
                return reject(e);
              }
            } else {
              return reject(error);
            }
          });
        });
      }

    p.
      Finally, the whole implementation.

    :js
      var PENDING = 0;
      var FULFILLED = 1;
      var REJECTED = 2;

      function Promise(fn) {
        // store state which can be PENDING, FULFILLED or REJECTED
        var state = PENDING;

        // store value once FULFILLED or REJECTED
        var value = null;

        // store sucess & failure handlers
        var handlers = [];

        function fulfill(result) {
          state = FULFILLED;
          value = result;
          handlers.forEach(handle);
          handlers = null;
        }

        function reject(error) {
          state = REJECTED;
          value = error;
          handlers.forEach(handle);
          handlers = null;
        }

        function resolve(result) {
          try {
            var then = getThen(result);
            if (then) {
              doResolve(then.bind(result), resolve, reject)
              return
            }
            fulfill(result);
          } catch (e) {
            reject(e);
          }
        }

        function handle(handler) {
          if (state === PENDING) {
            handlers.push(handler);
          } else {
            if (state === FULFILLED &&
              typeof handler.onFulfilled === 'function') {
              handler.onFulfilled(value);
            }
            if (state === REJECTED &&
              typeof handler.onRejected === 'function') {
              handler.onRejected(value);
            }
          }
        }

        this.done = function (onFulfilled, onRejected) {
          // ensure we are always asynchronous
          setTimeout(function () {
            handle({
              onFulfilled: onFulfilled,
              onRejected: onRejected
            });
          }, 0);
        }

        this.then = function (onFulfilled, onRejected) {
          var self = this;
          return new Promise(function (resolve, reject) {
            return self.done(function (result) {
              if (typeof onFulfilled === 'function') {
                try {
                  return resolve(onFulfilled(result));
                } catch (e) {
                  return reject(e);
                }
              } else {
                return resolve(result);
              }
            }, function (error) {
              if (typeof onRejected === 'function') {
                try {
                  return resolve(onRejected(error));
                } catch (e) {
                  return reject(e);
                }
              } else {
                return reject(error);
              }
            });
          });
        }

        doResolve(fn, resolve, reject);
      }

    h2#apendix Further Reading

    ul
      li
        a(href="https://github.com/then/promise/blob/master/src/core.js") then/promise
        |  implements Promise in a very similar way.
      li
        a(href="https://github.com/kriskowal/q/blob/v1/design/README.js") kriskowal/q
        |  is a very different implementation of promises and comes with a very nice
        |  walkthrough of the design principals behind it.
      li
        a(href="https://github.com/petkaantonov/bluebird") petkaantonov/bluebird
        |  is a promise implementation that was designed exclusivley
        |  for performance (along with its own
        |  esoteric helper methods).  The
        = ' '
        a(href="https://github.com/petkaantonov/bluebird/wiki/Optimization-killers") Optimization Killers Wiki page
        |  is extremely useful for picking up tips.
      li
        a(href="http://stackoverflow.com/questions/23772801/basic-javascript-promise-implementation-attempt/23785244#23785244") Stack Overflow
        |  is the original source of this article.

    p Please consider donating to the upkeep of this website via #[a(href="https://www.gittip.com/promisejs.org/") GitTip]

    ul.pager
      li.previous: a(href="/generators/") &larr; generators
      // li.next.disabled: a(href="#apendix") next &rarr;
